# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,перегрузки арифметических операторов:
# соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы
#  сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
#  Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
#  умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, number):
        self.number = number

    def make_order(self, rows):
        integer = self.number // rows
        division = self.number % rows
        return '\n'.join(['*' * rows for _ in range(integer)]) + '\n' + '*' * (division)

    def __str__(self):
        return self.number

    def __add__(self, other):
        return self.number + other.number

    def __sub__(self, other):
        return self.number - other.number if self.number - other.number > 0 \
            else 'Ячеек в первой клетке меньше, вычетание невозможно!'

    def __mul__(self, other):
        return self.number * other.number

    def __truediv__(self, other):
        return round(self.number / other.number)


cell_1 = Cell(30)
cell_2 = Cell(25)
print(cell_2.make_order(5))
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
